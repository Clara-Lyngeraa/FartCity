Fartcity assignment 07: 


our way of running:
./fsharp/fslex --unicode CLex.fsl     
./fsharp/fsyacc --module CPar CPar.fsy 
fsharpi -r ./fsharp/FsLexYacc.Runtime.dll Absyn.fs CPar.fs CLex.fs Parse.fs Machine.fs Comp.fs ParseAndComp.fs   

Exercise 8.1

(part i):
open ParseAndComp;;
> compileToFile (fromFile "ex11.c") "ex11.out";;
val it : Machine.instr list =
  [LDARGS; CALL (1, "L1"); STOP; Label "L1"; INCSP 1; INCSP 1; INCSP 100;
   GETSP; CSTI 99; SUB; INCSP 100; GETSP; CSTI 99; SUB; INCSP 100; GETSP;
   CSTI 99; SUB; INCSP 100; GETSP; CSTI 99; SUB; GETBP; CSTI 2; ADD; CSTI 1;
   STI; INCSP -1; GOTO "L3"; Label "L2"; GETBP; CSTI 103; ADD; LDI; GETBP;
   CSTI 2; ADD; LDI; ADD; CSTI 0; STI; INCSP -1; GETBP; CSTI 2; ADD; GETBP;
   CSTI 2; ADD; LDI; CSTI 1; ADD; STI; INCSP -1; INCSP 0; Label "L3"; GETBP;
   CSTI 2; ADD; LDI; GETBP; CSTI 0; ADD; LDI; SWAP; LT; NOT; IFNZRO "L2";
   GETBP; CSTI 2; ADD; CSTI 1; STI; INCSP -1; GOTO "L5"; Label "L4"; GETBP;
   CSTI 204; ADD; LDI; GETBP; CSTI 2; ADD; LDI; ADD; GETBP; CSTI 305; ADD; LDI;
   GETBP; CSTI 2; ADD; LDI; ADD; CSTI 0; STI; STI; INCSP -1; GETBP; CSTI 2;
   ADD; ...]

compile "ex11";;
The Java stack machine:

! should be run outside of interactive !
> javac Machine.java
> java Machine ex11.out 8


The C stack machine
gcc machine.c
./a.out ex11.out 8
1 5 8 6 3 7 2 4 
1 6 8 3 7 4 2 5 
1 7 4 6 8 2 5 3 
1 7 5 8 2 4 6 3 
2 4 6 8 3 1 7 5 
2 5 7 1 3 8 6 4 
2 5 7 4 1 8 6 3 
2 6 1 7 4 8 3 5 
2 6 8 3 1 4 7 5 
2 7 3 6 8 5 1 4 
2 7 5 8 1 4 6 3 
2 8 6 1 3 5 7 4 
3 1 7 5 8 2 4 6 
3 5 2 8 1 7 4 6 
3 5 2 8 6 4 7 1 
3 5 7 1 4 2 8 6 
3 5 8 4 1 7 2 6 
3 6 2 5 8 1 7 4 
3 6 2 7 1 4 8 5 
3 6 2 7 5 1 8 4 
3 6 4 1 8 5 7 2 
3 6 4 2 8 5 7 1 
3 6 8 1 4 7 5 2 
3 6 8 1 5 7 2 4 
3 6 8 2 4 1 7 5 
3 7 2 8 5 1 4 6 
3 7 2 8 6 4 1 5 
3 8 4 7 1 6 2 5 
4 1 5 8 2 7 3 6 
4 1 5 8 6 3 7 2 
4 2 5 8 6 1 3 7 
4 2 7 3 6 8 1 5 
4 2 7 3 6 8 5 1 
4 2 7 5 1 8 6 3 
4 2 8 5 7 1 3 6 
4 2 8 6 1 3 5 7 
4 6 1 5 2 8 3 7 
4 6 8 2 7 1 3 5 
4 6 8 3 1 7 5 2 
4 7 1 8 5 2 6 3 
4 7 3 8 2 5 1 6 
4 7 5 2 6 1 3 8 
4 7 5 3 1 6 8 2 
4 8 1 3 6 2 7 5 
4 8 1 5 7 2 6 3 
4 8 5 3 1 7 2 6 
5 1 4 6 8 2 7 3 
5 1 8 4 2 7 3 6 
5 1 8 6 3 7 2 4 
5 2 4 6 8 3 1 7 
5 2 4 7 3 8 6 1 
5 2 6 1 7 4 8 3 
5 2 8 1 4 7 3 6 
5 3 1 6 8 2 4 7 
5 3 1 7 2 8 6 4 
5 3 8 4 7 1 6 2 
5 7 1 3 8 6 4 2 
5 7 1 4 2 8 6 3 
5 7 2 4 8 1 3 6 
5 7 2 6 3 1 4 8 
5 7 2 6 3 1 8 4 
5 7 4 1 3 8 6 2 
5 8 4 1 3 6 2 7 
5 8 4 1 7 2 6 3 
6 1 5 2 8 3 7 4 
6 2 7 1 3 5 8 4 
6 2 7 1 4 8 5 3 
6 3 1 7 5 8 2 4 
6 3 1 8 4 2 7 5 
6 3 1 8 5 2 4 7 
6 3 5 7 1 4 2 8 
6 3 5 8 1 4 2 7 
6 3 7 2 4 8 1 5 
6 3 7 2 8 5 1 4 
6 3 7 4 1 8 2 5 
6 4 1 5 8 2 7 3 
6 4 2 8 5 7 1 3 
6 4 7 1 3 5 2 8 
6 4 7 1 8 2 5 3 
6 8 2 4 1 7 5 3 
7 1 3 8 6 4 2 5 
7 2 4 1 8 5 3 6 
7 2 6 3 1 4 8 5 
7 3 1 6 8 5 2 4 
7 3 8 2 5 1 6 4 
7 4 2 5 8 1 3 6 
7 4 2 8 6 1 3 5 
7 5 3 1 6 8 2 4 
8 2 4 1 7 5 3 6 
8 2 5 3 1 7 4 6 
8 3 1 6 2 5 7 4 
8 4 1 3 6 2 7 5 

Ran 0.054 seconds

(part ii)
./fsharp/fslex --unicode CLex.fsl     
./fsharp/fsyacc --module CPar CPar.fsy 
fsharpi -r ./fsharp/FsLexYacc.Runtime.dll Absyn.fs CPar.fs CLex.fs Parse.fs Machine.fs Comp.fs ParseAndComp.fs   

open ParseAndComp;;
> compileToFile (fromFile "ex3.c") "ex3.out";;
val it : Machine.instr list =
  [LDARGS; CALL (1, "L1"); STOP; Label "L1"; INCSP 1; GETBP; CSTI 1; ADD;
   CSTI 0; STI; INCSP -1; GOTO "L3"; Label "L2"; GETBP; CSTI 1; ADD; LDI;
   PRINTI; INCSP -1; GETBP; CSTI 1; ADD; GETBP; CSTI 1; ADD; LDI; CSTI 1; ADD;
   STI; INCSP -1; INCSP 0; Label "L3"; GETBP; CSTI 1; ADD; LDI; GETBP; CSTI 0;
   ADD; LDI; LT; IFNZRO "L2"; INCSP -1; RET 0]

structured bytecode: 

Micro-c code from ex3.c
void main(int n) { 
    int i; 
    i=0; 
    while (i < n) { 
      print i; 
      i=i+1;
    } 
  }
  

24: LDARGS
19: CALL 1 (what is a here in call m a)
25: STOP
(label 1 starts here) 
15: INCSP 1                     |
13: GETBP                       |       
0: CSTI 1                       |   int i;
1: ADD                          |    
0: CSTI 0                           | 
12: STI                             |   i = 0;
15: INCSP -1                        |
16: GOTO (what is L3 here?)
(label 2 starts here)
13: GETBP                           |
0: CSTI 1                           |
1: ADD                              |       (i+1 on top of stack)
11: LDI                             |       (Access, i+1? on stack)
22: PRINTI;                         |   print i;
15: INCSP -1                        |
13: GETBP                       |                      
0: CSTI 1                       |
1: ADD                          |
13: GETBP                       |
0: CSTI 1                       |
1: ADD                          |
11: LDI                         |   i = i + 1
0: CSTI 1                       |
1: ADD                          |
12: STI                         |
15: INCSP -1                    |
15: INCSP 0                     |
(Label 3)
13: GETBP                       |
0: CSTI 1                       |
1: ADD                          |
11: LDI                         |   
13: GETBP                       |
0: CSTI 1                       |
1: ADD                          |  i < n
11: LDI                         |
7: LT (less than or equal)      | 
18: IFNZRO (what is L2 if not zero)        |
15: INCSP -1                    |
21 RET 0                        |




open ParseAndComp;;
> compileToFile (fromFile "ex5.c") "ex5.out";;
val it : Machine.instr list =
  [LDARGS; CALL (1, "L1"); STOP; Label "L1"; INCSP 1; GETBP; CSTI 1; ADD;
   GETBP; CSTI 0; ADD; LDI; STI; INCSP -1; INCSP 1; GETBP; CSTI 0; ADD; LDI;
   GETBP; CSTI 2; ADD; CALL (2, "L2"); INCSP -1; GETBP; CSTI 2; ADD; LDI;
   PRINTI; INCSP -1; INCSP -1; GETBP; CSTI 1; ADD; LDI; PRINTI; INCSP -1;
   INCSP -1; RET 0; Label "L2"; GETBP; CSTI 1; ADD; LDI; GETBP; CSTI 0; ADD;
   LDI; GETBP; CSTI 0; ADD; LDI; MUL; STI; INCSP -1; INCSP 0; RET 1]

structured bytecode: 

Micro-c code from ex5.c
void main(int n) {
    int r; 
    r = n;
    { 
      int r;
      square(n, &r);
      print r;
    }
    print r;
  }
  
  void square(int i, int *rp) {
    *rp = i * i;
  }
  
  
24: LDARGS
19: CALL 1 (what is L1?)
25: STOP

15: INCSP 1                     |   int r     (*allocate r*)

13: GETBP                           |     
0: CSTI 1                           |   (*get address of r at offset 1*)
1: ADD                              |   (*adding to the stack the address of r*)

13: GETBP                           |   (*get address of n at offset 0*)
0: CSTI 0                           | 
1: ADD                              |   (*adding to the stack the address of n*)

11: LDI                             |   (*load what is at n's address)
12: STI                             |   r = n;
15: INCSP -1                        |

15: INCSP 1                      |    int r; (*allocate r (in block)*)

13: GETBP                        |
0: CSTI 0                        | 
1: ADD                           | (*adding to the stack the address of n*)

11: LDI                          | (*load what is at n's address)
13: GETBP                        |    
0: CSTI 2                        | 
1: ADD                           | (*adding to the stack the address of &r*)

19: CALL 2 (what is L2)          | square(n, &r); 

15: INCSP -1                        |
13: GETBP                           |
0: CSTI 2                           | 
1: ADD                              |    
11: LDI                             |
22: PRINTI;                         |   print r (* the r in block *);

15: INCSP -1                        |
15: INCSP -1                        |
13: GETBP                           |
0: CSTI 1                           | 
1: ADD                              |    
11: LDI                             |
22: PRINTI;                         |   print r (* the r not in block*);
15: INCSP -1                        |
15: INCSP -1                        |
21 RET 0                            |


void square(int i, int *rp) {
*rp = i * i;
}

(label 2 starts here)
13: GETBP                           |
0: CSTI 1                           | 
1: ADD                              | (*adding to the stack the address of *rp *) 
11: LDI                             | (*load what is at *rp's address)

13: GETBP                           | 
0: CSTI 0                           |
1: ADD                              |  (*adding to the stack the address of i *)  
11: LDI                             |  (*load what is at i's address)  

13: GETBP                           |
0: CSTI 0                           |
1: ADD                              |  (*adding to the stack the address of i *)    
11: LDI                             |  (*load what is at i's address) 

3: MUL                              |  i * i;
12: STI                             |  *rp = i * i; (* store at address of *rp i * i *)    
15: INCSP -1                        |
15: INCSP 0                         |
21 RET 1                            |


The block is visible when delocating twice from the stack when "exiting" it. 

> java Machine ex3.out 10
0 1 2 3 4 5 6 7 8 9 
Ran 0.12 seconds

Can be found in ex3trace.txt. *IS THIS ENOUGH??*
> java Machinetrace ex3.out 4 > ex3trace.txt
Ran 0.095 seconds


Exercise 8.3
Updated files: CLex.fs, CPar.fsy, Absyn.fs, ex8_3test.c, comp.fs

./fsharp/fslex --unicode CLex.fsl     
./fsharp/fsyacc --module CPar CPar.fsy 
fsharpi -r ./fsharp/FsLexYacc.Runtime.dll Absyn.fs CPar.fs CLex.fs Parse.fs Machine.fs Comp.fs ParseAndComp.fs   

MicroC code in ex8_3test.c:

void main()
{
    int t;
    t = 0;
    ++t;
    print t;
}

open ParseAndComp;;
> compileToFile (fromFile "ex8_3test.c") "ex8_3test.out";;
val it : Machine.instr list =
  [LDARGS; CALL (0, "L1"); STOP; Label "L1"; INCSP 1; GETBP; CSTI 0; ADD;
   CSTI 0; STI; INCSP -1; GETBP; CSTI 0; ADD; DUP; LDI; CSTI 1; ADD; STI;
   INCSP -1; GETBP; CSTI 0; ADD; LDI; PRINTI; INCSP -1; INCSP -1; RET -1]

! should be run outside of interactive !
> javac Machine.java
> java Machine ex8_3test.out 
1 
Ran 0.013 seconds

Exercise 8.4 *********** I HAVE NO IDEA ****************
open ParseAndComp;;
> compileToFile (fromFile "ex8.c") "ex8.out";;
val it : Machine.instr list =
  [LDARGS; CALL (0, "L1"); STOP; Label "L1"; INCSP 1; GETBP; CSTI 0; ADD;
   CSTI 20000000; STI; INCSP -1; GOTO "L3"; Label "L2"; GETBP; CSTI 0; ADD;
   GETBP; CSTI 0; ADD; LDI; CSTI 1; SUB; STI; INCSP -1; INCSP 0; Label "L3";
   GETBP; CSTI 0; ADD; LDI; IFNZRO "L2"; INCSP -1; RET -1]

> javac Machine.java
> java Machine ex8.out
Ran 0.658 seconds

In comparison to: 
(Prog1: 0 20000000 16 7 0 1 2 9 18 4 25)
Or in symbolic code: 20000000; GOTO 7; 1; SUB; DUP; IFNZRO 4; STOP
> java Machine prog1
Ran 0.162 seconds

In prog1 the address at the top of the stack is duplicated (the code at address 7 is DUP). 
In ex8 we never duplicate. So eahc time we have to decrement i with 1, we nead to load what is at adress i twice
each loop. Besides this, prog1 does not setup main, does not initialise a variable i and sets it to 20000000 and create 3 labels. 

open ParseAndComp;;
> compileToFile (fromFile "ex13.c") "ex13.out";;
val it : Machine.instr list =
  [LDARGS; CALL (1, "L1"); STOP; Label "L1"; INCSP 1; GETBP; CSTI 1; ADD;
   CSTI 1889; STI; INCSP -1; GOTO "L3"; Label "L2"; GETBP; CSTI 1; ADD; GETBP;
   CSTI 1; ADD; LDI; CSTI 1; ADD; STI; INCSP -1; GETBP; CSTI 1; ADD; LDI;
   CSTI 4; MOD; CSTI 0; EQ; IFZERO "L7"; GETBP; CSTI 1; ADD; LDI; CSTI 100;
   MOD; CSTI 0; EQ; NOT; IFNZRO "L9"; GETBP; CSTI 1; ADD; LDI; CSTI 400; MOD;
   CSTI 0; EQ; GOTO "L8"; Label "L9"; CSTI 1; Label "L8"; GOTO "L6";
   Label "L7"; CSTI 0; Label "L6"; IFZERO "L4"; GETBP; CSTI 1; ADD; LDI;
   PRINTI; INCSP -1; GOTO "L5"; Label "L4"; INCSP 0; Label "L5"; INCSP 0;
   Label "L3"; GETBP; CSTI 1; ADD; LDI; GETBP; CSTI 0; ADD; LDI; LT;
   IFNZRO "L2"; INCSP -1; RET 0]


> javac Machine.java
> java Machine ex13.out 2000
1892 1896 1904 1908 1912 1916 1920 1924 1928 1932 1936 1940 1944 1948 1952 1956 1960 1964 1968 1972 1976 1980 1984 1988 1992 1996 2000 
Ran 0.015 seconds

Code in ex13.c:

void main(int n) {
  int y;
  y = 1889;
  while (y < n) {
    y = y + 1;
    if (y % 4 == 0 && (y % 100 != 0 || y % 400 == 0)) 
      print y;
  }
}

Structured bytecode: 

CALL (1, "L1"); 
STOP; 
INCSP 1;        | int y
GETBP; 
CSTI 1; 
ADD;
CSTI 1889;      
STI;            | y = 1889
INCSP -1; 
GOTO "L3"; 

Label "L2";
GETBP; 
CSTI 1;        
ADD;            
GETBP;
CSTI 1; 
ADD; 
LDI; 
CSTI 1; 
ADD; 
STI;            | y = y + 1
INCSP -1; 

GETBP; 
CSTI 1; 
ADD; 
LDI;
CSTI 4; 
MOD; 
CSTI 0; 
EQ;             |
IFZERO "L7";    | y % 4 == 0 

GETBP; 
CSTI 1; 
ADD; 
LDI; 
CSTI 100;
MOD; 
CSTI 0; 
EQ; 
NOT; 
IFNZRO "L9";  | y % 100 != 0 

GETBP; 
CSTI 1; 
ADD; 
LDI; 
CSTI 400; 
MOD;
CSTI 0; 
EQ;       | y % 400 == 0

GOTO "L8"; 

Label "L9"; 
CSTI 1; 

Label "L8"; 
GOTO "L6";

Label "L7"; 
CSTI 0; 

Label "L6"; 
IFZERO "L4";   

GETBP; 
CSTI 1; 
ADD; 
LDI;
PRINTI;     | print y
INCSP -1; 
GOTO "L5"; 

Label "L4"; 
INCSP 0; 

Label "L5"; 
INCSP 0;

Label "L3";
GETBP; 
CSTI 1; 
ADD; 
LDI; 
GETBP; 
CSTI 0;         | y < n
ADD; 
LDI; 
LT;
IFNZRO "L2";    | if y < n go to L2 
INCSP -1; 
RET 0
_______________________________________________________________

&&
IFZERO "L7";    | y % 4 == 0  jump to L7 if false
Label "L7"; 
CSTI 0;         | push 0 for true to the stack

The second statement is skipped if the first one is not true: 
Since EQ evaluates to 1 if they are equal and 0 if not. 

EQ;             |
IFZERO "L7";    | y % 4 == 0 

GETBP;                          |
CSTI 1;                         |
ADD;                            | 
LDI;                            |
CSTI 100;                       | 
MOD;                            |   
CSTI 0;                         | 
EQ;                             |
NOT;                            |
IFNZRO "L9";  | y % 100 != 0    |
GETBP;                          |     ALL THIS IS SKIPPED IF FIRST STATEMENT IS FALSE
CSTI 1;                         |
ADD;                            |
LDI;                            |
CSTI 400;                       |
MOD;                            | 
CSTI 0;                         |
EQ;       | y % 400 == 0        |
GOTO "L8";                      |
Label "L9";                     |
CSTI 1;                         |
Label "L8";                     |
GOTO "L6";                      |

Label "L7";                           <-- we jump to here if false
CSTI 0; 


_______________________________________________________

|| 

IFNZRO "L9";  | y % 100 != 0 jump to L9 if not 0

GETBP;                        |
CSTI 1;                       |
ADD;                          |
LDI;                          |
CSTI 400;                     | All this is skipped if first expression is true
MOD;                          |
CSTI 0;                       |
EQ;       | y % 400 == 0      |

GOTO "L8"; 

Label "L9"; 
CSTI 1; 

So if the first expression in the || clause is true, the second one is just skipped. 


Exercise 8.5:
Updated files: CLex.fs, CPar.fsy, Absyn.fs, ex8_5test.c, comp.fs

open ParseAndComp;;
> compileToFile (fromFile "ex8_5test.c") "ex8_5test.out";;

Exercise 8.6:


open ParseAndComp;;
> compileToFile (fromFile "ex8_6test.c") "ex8_6test.out";;

