// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "CPar.fsy"

(*	File MicroC/CPar.fsy 
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open Absyn

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 19 "CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | BREAK
  | PRINTCURRENTFRAME
  | EOF
  | COLON
  | QUESTIONMARK
  | SWITCH
  | CASE
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | INC
  | DEC
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | PRINT
  | PRINTLN
  | RETURN
  | VOID
  | WHILE
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_BREAK
    | TOKEN_PRINTCURRENTFRAME
    | TOKEN_EOF
    | TOKEN_COLON
    | TOKEN_QUESTIONMARK
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_INC
    | TOKEN_DEC
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_Case
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | BREAK  -> 0 
  | PRINTCURRENTFRAME  -> 1 
  | EOF  -> 2 
  | COLON  -> 3 
  | QUESTIONMARK  -> 4 
  | SWITCH  -> 5 
  | CASE  -> 6 
  | LPAR  -> 7 
  | RPAR  -> 8 
  | LBRACE  -> 9 
  | RBRACE  -> 10 
  | LBRACK  -> 11 
  | RBRACK  -> 12 
  | SEMI  -> 13 
  | COMMA  -> 14 
  | ASSIGN  -> 15 
  | AMP  -> 16 
  | INC  -> 17 
  | DEC  -> 18 
  | NOT  -> 19 
  | SEQOR  -> 20 
  | SEQAND  -> 21 
  | EQ  -> 22 
  | NE  -> 23 
  | GT  -> 24 
  | LT  -> 25 
  | GE  -> 26 
  | LE  -> 27 
  | PLUS  -> 28 
  | MINUS  -> 29 
  | TIMES  -> 30 
  | DIV  -> 31 
  | MOD  -> 32 
  | CHAR  -> 33 
  | ELSE  -> 34 
  | IF  -> 35 
  | INT  -> 36 
  | NULL  -> 37 
  | PRINT  -> 38 
  | PRINTLN  -> 39 
  | RETURN  -> 40 
  | VOID  -> 41 
  | WHILE  -> 42 
  | CSTSTRING _ -> 43 
  | NAME _ -> 44 
  | CSTINT _ -> 45 
  | CSTBOOL _ -> 46 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_BREAK 
  | 1 -> TOKEN_PRINTCURRENTFRAME 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_COLON 
  | 4 -> TOKEN_QUESTIONMARK 
  | 5 -> TOKEN_SWITCH 
  | 6 -> TOKEN_CASE 
  | 7 -> TOKEN_LPAR 
  | 8 -> TOKEN_RPAR 
  | 9 -> TOKEN_LBRACE 
  | 10 -> TOKEN_RBRACE 
  | 11 -> TOKEN_LBRACK 
  | 12 -> TOKEN_RBRACK 
  | 13 -> TOKEN_SEMI 
  | 14 -> TOKEN_COMMA 
  | 15 -> TOKEN_ASSIGN 
  | 16 -> TOKEN_AMP 
  | 17 -> TOKEN_INC 
  | 18 -> TOKEN_DEC 
  | 19 -> TOKEN_NOT 
  | 20 -> TOKEN_SEQOR 
  | 21 -> TOKEN_SEQAND 
  | 22 -> TOKEN_EQ 
  | 23 -> TOKEN_NE 
  | 24 -> TOKEN_GT 
  | 25 -> TOKEN_LT 
  | 26 -> TOKEN_GE 
  | 27 -> TOKEN_LE 
  | 28 -> TOKEN_PLUS 
  | 29 -> TOKEN_MINUS 
  | 30 -> TOKEN_TIMES 
  | 31 -> TOKEN_DIV 
  | 32 -> TOKEN_MOD 
  | 33 -> TOKEN_CHAR 
  | 34 -> TOKEN_ELSE 
  | 35 -> TOKEN_IF 
  | 36 -> TOKEN_INT 
  | 37 -> TOKEN_NULL 
  | 38 -> TOKEN_PRINT 
  | 39 -> TOKEN_PRINTLN 
  | 40 -> TOKEN_RETURN 
  | 41 -> TOKEN_VOID 
  | 42 -> TOKEN_WHILE 
  | 43 -> TOKEN_CSTSTRING 
  | 44 -> TOKEN_NAME 
  | 45 -> TOKEN_CSTINT 
  | 46 -> TOKEN_CSTBOOL 
  | 49 -> TOKEN_end_of_input
  | 47 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Vardec 
    | 7 -> NONTERM_Vardesc 
    | 8 -> NONTERM_Vardesc 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Fundec 
    | 13 -> NONTERM_Fundec 
    | 14 -> NONTERM_Paramdecs 
    | 15 -> NONTERM_Paramdecs 
    | 16 -> NONTERM_Paramdecs1 
    | 17 -> NONTERM_Paramdecs1 
    | 18 -> NONTERM_Block 
    | 19 -> NONTERM_StmtOrDecSeq 
    | 20 -> NONTERM_StmtOrDecSeq 
    | 21 -> NONTERM_StmtOrDecSeq 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_StmtM 
    | 25 -> NONTERM_StmtM 
    | 26 -> NONTERM_StmtM 
    | 27 -> NONTERM_StmtM 
    | 28 -> NONTERM_StmtM 
    | 29 -> NONTERM_StmtM 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtM 
    | 32 -> NONTERM_StmtM 
    | 33 -> NONTERM_Case 
    | 34 -> NONTERM_Case 
    | 35 -> NONTERM_StmtU 
    | 36 -> NONTERM_StmtU 
    | 37 -> NONTERM_StmtU 
    | 38 -> NONTERM_Expr 
    | 39 -> NONTERM_Expr 
    | 40 -> NONTERM_ExprNotAccess 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_ExprNotAccess 
    | 60 -> NONTERM_ExprNotAccess 
    | 61 -> NONTERM_ExprNotAccess 
    | 62 -> NONTERM_AtExprNotAccess 
    | 63 -> NONTERM_AtExprNotAccess 
    | 64 -> NONTERM_AtExprNotAccess 
    | 65 -> NONTERM_Access 
    | 66 -> NONTERM_Access 
    | 67 -> NONTERM_Access 
    | 68 -> NONTERM_Access 
    | 69 -> NONTERM_Access 
    | 70 -> NONTERM_Exprs 
    | 71 -> NONTERM_Exprs 
    | 72 -> NONTERM_Exprs1 
    | 73 -> NONTERM_Exprs1 
    | 74 -> NONTERM_Const 
    | 75 -> NONTERM_Const 
    | 76 -> NONTERM_Const 
    | 77 -> NONTERM_Const 
    | 78 -> NONTERM_Type 
    | 79 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 49 
let _fsyacc_tagOfErrorTerminal = 47

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | BREAK  -> "BREAK" 
  | PRINTCURRENTFRAME  -> "PRINTCURRENTFRAME" 
  | EOF  -> "EOF" 
  | COLON  -> "COLON" 
  | QUESTIONMARK  -> "QUESTIONMARK" 
  | SWITCH  -> "SWITCH" 
  | CASE  -> "CASE" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | INC  -> "INC" 
  | DEC  -> "DEC" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | BREAK  -> (null : System.Object) 
  | PRINTCURRENTFRAME  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | QUESTIONMARK  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | INC  -> (null : System.Object) 
  | DEC  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 8us; 65535us; 0us; 6us; 4us; 6us; 25us; 34us; 29us; 34us; 35us; 34us; 37us; 42us; 40us; 42us; 43us; 42us; 4us; 65535us; 9us; 11us; 10us; 11us; 14us; 15us; 16us; 17us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 25us; 26us; 29us; 30us; 3us; 65535us; 25us; 33us; 29us; 33us; 35us; 36us; 9us; 65535us; 27us; 28us; 31us; 32us; 37us; 54us; 40us; 54us; 43us; 54us; 58us; 54us; 59us; 54us; 64us; 54us; 80us; 81us; 3us; 65535us; 37us; 38us; 40us; 41us; 43us; 44us; 4us; 65535us; 37us; 40us; 40us; 40us; 43us; 40us; 58us; 84us; 6us; 65535us; 37us; 45us; 40us; 45us; 43us; 45us; 58us; 46us; 59us; 60us; 64us; 65us; 2us; 65535us; 70us; 71us; 81us; 82us; 6us; 65535us; 37us; 47us; 40us; 47us; 43us; 47us; 58us; 47us; 59us; 83us; 64us; 85us; 34us; 65535us; 37us; 48us; 40us; 48us; 43us; 48us; 50us; 52us; 56us; 57us; 58us; 48us; 59us; 48us; 62us; 63us; 64us; 48us; 67us; 68us; 75us; 76us; 91us; 92us; 94us; 120us; 97us; 98us; 99us; 100us; 121us; 102us; 122us; 103us; 123us; 104us; 124us; 105us; 125us; 106us; 126us; 107us; 127us; 108us; 128us; 109us; 129us; 110us; 130us; 111us; 131us; 112us; 132us; 113us; 133us; 115us; 138us; 116us; 139us; 117us; 140us; 118us; 143us; 114us; 154us; 119us; 157us; 120us; 34us; 65535us; 37us; 88us; 40us; 88us; 43us; 88us; 50us; 88us; 56us; 88us; 58us; 88us; 59us; 88us; 62us; 88us; 64us; 88us; 67us; 88us; 75us; 88us; 91us; 88us; 94us; 88us; 97us; 88us; 99us; 88us; 121us; 88us; 122us; 88us; 123us; 88us; 124us; 88us; 125us; 88us; 126us; 88us; 127us; 88us; 128us; 88us; 129us; 88us; 130us; 88us; 131us; 88us; 132us; 88us; 133us; 88us; 138us; 89us; 139us; 88us; 140us; 88us; 143us; 89us; 154us; 88us; 157us; 88us; 35us; 65535us; 37us; 90us; 40us; 90us; 43us; 90us; 50us; 90us; 56us; 90us; 58us; 90us; 59us; 90us; 62us; 90us; 64us; 90us; 67us; 90us; 75us; 90us; 91us; 90us; 94us; 90us; 97us; 90us; 99us; 90us; 121us; 90us; 122us; 90us; 123us; 90us; 124us; 90us; 125us; 90us; 126us; 90us; 127us; 90us; 128us; 90us; 129us; 90us; 130us; 90us; 131us; 90us; 132us; 90us; 133us; 90us; 138us; 90us; 139us; 90us; 140us; 90us; 143us; 90us; 151us; 153us; 154us; 90us; 157us; 90us; 39us; 65535us; 37us; 87us; 40us; 87us; 43us; 87us; 50us; 87us; 56us; 87us; 58us; 87us; 59us; 87us; 62us; 87us; 64us; 87us; 67us; 87us; 75us; 87us; 91us; 87us; 94us; 87us; 97us; 87us; 99us; 87us; 121us; 87us; 122us; 87us; 123us; 87us; 124us; 87us; 125us; 87us; 126us; 87us; 127us; 87us; 128us; 87us; 129us; 87us; 130us; 87us; 131us; 87us; 132us; 87us; 133us; 87us; 134us; 135us; 136us; 137us; 138us; 86us; 139us; 87us; 140us; 87us; 143us; 86us; 145us; 146us; 148us; 149us; 151us; 152us; 154us; 87us; 157us; 87us; 1us; 65535us; 94us; 95us; 2us; 65535us; 94us; 156us; 157us; 158us; 35us; 65535us; 37us; 142us; 40us; 142us; 43us; 142us; 50us; 142us; 56us; 142us; 58us; 142us; 59us; 142us; 62us; 142us; 64us; 142us; 67us; 142us; 75us; 142us; 91us; 142us; 94us; 142us; 97us; 142us; 99us; 142us; 121us; 142us; 122us; 142us; 123us; 142us; 124us; 142us; 125us; 142us; 126us; 142us; 127us; 142us; 128us; 142us; 129us; 142us; 130us; 142us; 131us; 142us; 132us; 142us; 133us; 142us; 138us; 142us; 139us; 142us; 140us; 142us; 143us; 142us; 151us; 142us; 154us; 142us; 157us; 142us; 8us; 65535us; 0us; 10us; 4us; 10us; 25us; 9us; 29us; 9us; 35us; 9us; 37us; 9us; 40us; 9us; 43us; 9us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 18us; 23us; 26us; 29us; 33us; 43us; 47us; 52us; 59us; 62us; 69us; 104us; 139us; 175us; 215us; 217us; 220us; 256us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 2us; 6us; 13us; 3us; 6us; 10us; 11us; 1us; 7us; 2us; 7us; 13us; 1us; 8us; 3us; 8us; 10us; 11us; 1us; 9us; 3us; 9us; 10us; 11us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 15us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 3us; 22us; 28us; 35us; 1us; 23us; 14us; 24us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 14us; 26us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 26us; 1us; 27us; 3us; 28us; 35us; 36us; 3us; 28us; 35us; 36us; 16us; 28us; 35us; 36us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 3us; 28us; 35us; 36us; 2us; 28us; 35us; 1us; 28us; 2us; 29us; 37us; 2us; 29us; 37us; 15us; 29us; 37us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 2us; 29us; 37us; 1us; 29us; 1us; 30us; 1us; 30us; 14us; 30us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 32us; 14us; 32us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 32us; 2us; 33us; 34us; 2us; 33us; 34us; 2us; 33us; 34us; 2us; 33us; 34us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 4us; 38us; 41us; 66us; 69us; 3us; 38us; 41us; 69us; 1us; 39us; 2us; 39us; 63us; 1us; 40us; 1us; 41us; 14us; 41us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 2us; 42us; 65us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 43us; 14us; 43us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 44us; 14us; 44us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 45us; 14us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 57us; 58us; 13us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 61us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 61us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 61us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 69us; 15us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 72us; 73us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 2us; 59us; 69us; 1us; 60us; 2us; 60us; 69us; 3us; 61us; 63us; 66us; 1us; 61us; 1us; 61us; 1us; 61us; 1us; 62us; 2us; 63us; 66us; 1us; 63us; 1us; 64us; 2us; 64us; 69us; 1us; 65us; 1us; 66us; 2us; 66us; 69us; 1us; 66us; 2us; 67us; 68us; 2us; 67us; 69us; 1us; 68us; 1us; 69us; 1us; 69us; 1us; 71us; 1us; 73us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 76us; 1us; 76us; 1us; 77us; 1us; 78us; 1us; 79us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 23us; 27us; 29us; 32us; 34us; 38us; 40us; 44us; 46us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 106us; 108us; 123us; 125us; 128us; 130us; 145us; 147us; 149us; 153us; 157us; 174us; 178us; 181us; 183us; 186us; 189us; 205us; 208us; 210us; 212us; 214us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 258us; 260us; 263us; 266us; 269us; 272us; 274us; 276us; 278us; 280us; 285us; 289us; 291us; 294us; 296us; 298us; 313us; 316us; 318us; 320us; 322us; 324us; 339us; 341us; 356us; 358us; 373us; 388us; 403us; 418us; 433us; 448us; 463us; 478us; 493us; 508us; 523us; 538us; 552us; 567us; 582us; 597us; 612us; 627us; 643us; 645us; 647us; 649us; 651us; 653us; 655us; 657us; 659us; 661us; 663us; 665us; 667us; 669us; 671us; 674us; 676us; 679us; 683us; 685us; 687us; 689us; 691us; 694us; 696us; 698us; 701us; 703us; 705us; 708us; 710us; 713us; 716us; 718us; 720us; 722us; 724us; 726us; 728us; 730us; 732us; 734us; 736us; 738us; 740us; |]
let _fsyacc_action_rows = 166
let _fsyacc_actionTableElements = [|3us; 16386us; 33us; 165us; 36us; 164us; 41us; 23us; 0us; 49152us; 1us; 32768us; 2us; 3us; 0us; 16385us; 3us; 16386us; 33us; 165us; 36us; 164us; 41us; 23us; 0us; 16387us; 1us; 32768us; 13us; 7us; 0us; 16388us; 0us; 16389us; 3us; 32768us; 7us; 16us; 30us; 14us; 44us; 12us; 3us; 32768us; 7us; 16us; 30us; 14us; 44us; 13us; 1us; 16390us; 11us; 19us; 0us; 16391us; 1us; 16391us; 7us; 29us; 3us; 32768us; 7us; 16us; 30us; 14us; 44us; 12us; 1us; 16392us; 11us; 19us; 3us; 32768us; 7us; 16us; 30us; 14us; 44us; 12us; 2us; 32768us; 8us; 18us; 11us; 19us; 0us; 16393us; 2us; 32768us; 12us; 20us; 45us; 21us; 0us; 16394us; 1us; 32768us; 12us; 22us; 0us; 16395us; 1us; 32768us; 44us; 24us; 1us; 32768us; 7us; 25us; 2us; 16398us; 33us; 165us; 36us; 164us; 1us; 32768us; 8us; 27us; 1us; 32768us; 9us; 37us; 0us; 16396us; 2us; 16398us; 33us; 165us; 36us; 164us; 1us; 32768us; 8us; 31us; 1us; 32768us; 9us; 37us; 0us; 16397us; 0us; 16399us; 1us; 16400us; 14us; 35us; 2us; 32768us; 33us; 165us; 36us; 164us; 0us; 16401us; 22us; 16403us; 0us; 75us; 1us; 73us; 5us; 66us; 7us; 138us; 9us; 37us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 33us; 165us; 35us; 55us; 36us; 164us; 37us; 163us; 38us; 99us; 39us; 101us; 40us; 50us; 42us; 61us; 44us; 93us; 45us; 159us; 46us; 160us; 1us; 32768us; 10us; 39us; 0us; 16402us; 22us; 16403us; 0us; 75us; 1us; 73us; 5us; 66us; 7us; 138us; 9us; 37us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 33us; 165us; 35us; 55us; 36us; 164us; 37us; 163us; 38us; 99us; 39us; 101us; 40us; 50us; 42us; 61us; 44us; 93us; 45us; 159us; 46us; 160us; 0us; 16404us; 1us; 32768us; 13us; 43us; 22us; 16403us; 0us; 75us; 1us; 73us; 5us; 66us; 7us; 138us; 9us; 37us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 33us; 165us; 35us; 55us; 36us; 164us; 37us; 163us; 38us; 99us; 39us; 101us; 40us; 50us; 42us; 61us; 44us; 93us; 45us; 159us; 46us; 160us; 0us; 16405us; 0us; 16406us; 1us; 16406us; 34us; 59us; 0us; 16407us; 14us; 32768us; 13us; 49us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 0us; 16408us; 14us; 32768us; 7us; 138us; 13us; 51us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 0us; 16409us; 14us; 32768us; 13us; 53us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 0us; 16410us; 0us; 16411us; 1us; 32768us; 7us; 56us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 14us; 32768us; 8us; 58us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 20us; 32768us; 0us; 75us; 1us; 73us; 5us; 66us; 7us; 138us; 9us; 37us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 35us; 55us; 37us; 163us; 38us; 99us; 39us; 101us; 40us; 50us; 42us; 61us; 44us; 93us; 45us; 159us; 46us; 160us; 20us; 32768us; 0us; 75us; 1us; 73us; 5us; 66us; 7us; 138us; 9us; 37us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 35us; 55us; 37us; 163us; 38us; 99us; 39us; 101us; 40us; 50us; 42us; 61us; 44us; 93us; 45us; 159us; 46us; 160us; 0us; 16412us; 1us; 32768us; 7us; 62us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 14us; 32768us; 8us; 64us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 20us; 32768us; 0us; 75us; 1us; 73us; 5us; 66us; 7us; 138us; 9us; 37us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 35us; 55us; 37us; 163us; 38us; 99us; 39us; 101us; 40us; 50us; 42us; 61us; 44us; 93us; 45us; 159us; 46us; 160us; 0us; 16413us; 1us; 32768us; 7us; 67us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 14us; 32768us; 8us; 69us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 1us; 32768us; 9us; 70us; 1us; 32768us; 6us; 78us; 1us; 32768us; 10us; 72us; 0us; 16414us; 1us; 32768us; 13us; 74us; 0us; 16415us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 14us; 32768us; 13us; 77us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 0us; 16416us; 1us; 32768us; 45us; 79us; 1us; 32768us; 3us; 80us; 1us; 32768us; 9us; 37us; 1us; 16417us; 6us; 78us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 3us; 16422us; 8us; 150us; 11us; 154us; 15us; 91us; 2us; 16422us; 11us; 154us; 15us; 91us; 0us; 16423us; 1us; 16423us; 8us; 144us; 0us; 16424us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 16425us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 1us; 16449us; 7us; 94us; 13us; 16454us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 1us; 32768us; 8us; 96us; 0us; 16426us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 0us; 16427us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 16428us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 0us; 16429us; 3us; 16430us; 30us; 123us; 31us; 124us; 32us; 125us; 3us; 16431us; 30us; 123us; 31us; 124us; 32us; 125us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 9us; 16435us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 9us; 16436us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 5us; 16437us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 5us; 16438us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 5us; 16439us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 5us; 16440us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 11us; 16441us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 13us; 32768us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 12us; 16442us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 14us; 32768us; 4us; 139us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 14us; 32768us; 3us; 140us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 14us; 32768us; 8us; 141us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 14us; 32768us; 12us; 155us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 14us; 16456us; 14us; 157us; 20us; 133us; 21us; 132us; 22us; 126us; 23us; 127us; 24us; 128us; 25us; 129us; 26us; 130us; 27us; 131us; 28us; 121us; 29us; 122us; 30us; 123us; 31us; 124us; 32us; 125us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 3us; 32768us; 7us; 148us; 30us; 151us; 44us; 147us; 1us; 16443us; 11us; 154us; 3us; 32768us; 7us; 148us; 30us; 151us; 44us; 147us; 1us; 16444us; 11us; 154us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 0us; 16445us; 0us; 16446us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 0us; 16447us; 3us; 32768us; 7us; 148us; 30us; 151us; 44us; 147us; 1us; 16448us; 11us; 154us; 0us; 16449us; 3us; 32768us; 7us; 148us; 30us; 151us; 44us; 147us; 2us; 32768us; 8us; 150us; 11us; 154us; 0us; 16450us; 8us; 32768us; 7us; 143us; 16us; 145us; 29us; 161us; 30us; 151us; 37us; 163us; 44us; 147us; 45us; 159us; 46us; 160us; 1us; 16451us; 11us; 154us; 0us; 16452us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 0us; 16453us; 0us; 16455us; 13us; 32768us; 7us; 138us; 16us; 145us; 17us; 134us; 18us; 136us; 19us; 97us; 29us; 161us; 30us; 151us; 37us; 163us; 38us; 99us; 39us; 101us; 44us; 93us; 45us; 159us; 46us; 160us; 0us; 16457us; 0us; 16458us; 0us; 16459us; 1us; 32768us; 45us; 162us; 0us; 16460us; 0us; 16461us; 0us; 16462us; 0us; 16463us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 7us; 8us; 12us; 13us; 15us; 16us; 17us; 21us; 25us; 27us; 28us; 30us; 34us; 36us; 40us; 43us; 44us; 47us; 48us; 50us; 51us; 53us; 55us; 58us; 60us; 62us; 63us; 66us; 68us; 70us; 71us; 72us; 74us; 77us; 78us; 101us; 103us; 104us; 127us; 128us; 130us; 153us; 154us; 155us; 157us; 158us; 173us; 174us; 189us; 190us; 205us; 206us; 207us; 209us; 223us; 238us; 259us; 280us; 281us; 283us; 297us; 312us; 333us; 334us; 336us; 350us; 365us; 367us; 369us; 371us; 372us; 374us; 375us; 389us; 404us; 405us; 407us; 409us; 411us; 413us; 414us; 415us; 416us; 417us; 421us; 424us; 425us; 427us; 428us; 442us; 456us; 458us; 472us; 474us; 475us; 489us; 490us; 504us; 518us; 519us; 523us; 527us; 528us; 529us; 530us; 540us; 550us; 556us; 562us; 568us; 574us; 586us; 600us; 613us; 628us; 643us; 658us; 673us; 688us; 702us; 716us; 730us; 744us; 758us; 772us; 786us; 800us; 814us; 828us; 842us; 856us; 870us; 874us; 876us; 880us; 882us; 896us; 910us; 924us; 925us; 926us; 940us; 941us; 945us; 947us; 948us; 952us; 955us; 956us; 965us; 967us; 968us; 982us; 983us; 984us; 998us; 999us; 1000us; 1001us; 1003us; 1004us; 1005us; 1006us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 5us; 7us; 2us; 3us; 4us; 5us; 7us; 5us; 5us; 1us; 1us; 1us; 3us; 4us; 2us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 7us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 4us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 21us; 21us; 22us; 22us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 16397us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 16405us; 16406us; 65535us; 16407us; 65535us; 16408us; 65535us; 16409us; 65535us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 16415us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 16418us; 16419us; 16420us; 16421us; 65535us; 65535us; 16423us; 65535us; 16424us; 65535us; 65535us; 65535us; 65535us; 65535us; 16426us; 65535us; 65535us; 65535us; 65535us; 16429us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16445us; 16446us; 65535us; 16447us; 65535us; 65535us; 16449us; 65535us; 65535us; 16450us; 65535us; 65535us; 16452us; 65535us; 16453us; 16455us; 65535us; 16457us; 16458us; 16459us; 65535us; 16460us; 16461us; 16462us; 16463us; |]
let _fsyacc_reductions ()  =    [| 
# 451 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 460 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "CPar.fsy"
                                                               Prog _1 
                   )
# 46 "CPar.fsy"
                 : Absyn.program));
# 471 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CPar.fsy"
                                                               [] 
                   )
# 50 "CPar.fsy"
                 : 'Topdecs));
# 481 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "CPar.fsy"
                                                               _1 :: _2 
                   )
# 51 "CPar.fsy"
                 : 'Topdecs));
# 493 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 55 "CPar.fsy"
                 : 'Topdec));
# 504 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "CPar.fsy"
                                                               _1 
                   )
# 56 "CPar.fsy"
                 : 'Topdec));
# 515 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 60 "CPar.fsy"
                 : 'Vardec));
# 527 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 64 "CPar.fsy"
                 : 'Vardesc));
# 538 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 65 "CPar.fsy"
                 : 'Vardesc));
# 549 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "CPar.fsy"
                                                               _2                                      
                   )
# 66 "CPar.fsy"
                 : 'Vardesc));
# 560 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 67 "CPar.fsy"
                 : 'Vardesc));
# 571 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 68 "CPar.fsy"
                 : 'Vardesc));
# 583 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CPar.fsy"
                                                               Fundec(None,     _2, _4, _6) 
                   )
# 72 "CPar.fsy"
                 : 'Fundec));
# 596 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "CPar.fsy"
                                                               Fundec(Some(_1), _2, _4, _6) 
                   )
# 73 "CPar.fsy"
                 : 'Fundec));
# 610 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "CPar.fsy"
                                                               [] 
                   )
# 77 "CPar.fsy"
                 : 'Paramdecs));
# 620 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "CPar.fsy"
                                                               _1 
                   )
# 78 "CPar.fsy"
                 : 'Paramdecs));
# 631 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CPar.fsy"
                                                               [_1]     
                   )
# 82 "CPar.fsy"
                 : 'Paramdecs1));
# 642 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 83 "CPar.fsy"
                 : 'Paramdecs1));
# 654 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "CPar.fsy"
                                                               Block _2 
                   )
# 87 "CPar.fsy"
                 : 'Block));
# 665 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "CPar.fsy"
                                                               [] 
                   )
# 91 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 675 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 92 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 687 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 93 "CPar.fsy"
                 : 'StmtOrDecSeq));
# 699 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "CPar.fsy"
                                                               _1 
                   )
# 97 "CPar.fsy"
                 : 'Stmt));
# 710 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "CPar.fsy"
                                                               _1 
                   )
# 98 "CPar.fsy"
                 : 'Stmt));
# 721 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CPar.fsy"
                                                               Expr(_1)             
                   )
# 102 "CPar.fsy"
                 : 'StmtM));
# 732 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CPar.fsy"
                                                               Return None          
                   )
# 103 "CPar.fsy"
                 : 'StmtM));
# 742 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 104 "CPar.fsy"
                 : 'StmtM));
# 753 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "CPar.fsy"
                                                               _1                   
                   )
# 105 "CPar.fsy"
                 : 'StmtM));
# 764 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 106 "CPar.fsy"
                 : 'StmtM));
# 777 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 107 "CPar.fsy"
                 : 'StmtM));
# 789 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Case)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "CPar.fsy"
                                                                    Switch(_3, _6)  
                   )
# 108 "CPar.fsy"
                 : 'StmtM));
# 801 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "CPar.fsy"
                                                 PrintCurFrame
                   )
# 109 "CPar.fsy"
                 : 'StmtM));
# 811 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "CPar.fsy"
                                          Break _2
                   )
# 110 "CPar.fsy"
                 : 'StmtM));
# 822 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "CPar.fsy"
                                                   [Case(_2, _4)]
                   )
# 114 "CPar.fsy"
                 : 'Case));
# 834 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Case)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "CPar.fsy"
                                                        Case(_2, _4) :: _5
                   )
# 115 "CPar.fsy"
                 : 'Case));
# 847 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 119 "CPar.fsy"
                 : 'StmtU));
# 860 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 120 "CPar.fsy"
                 : 'StmtU));
# 872 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "CPar.fsy"
                                                               While(_3, _5)        
                   )
# 121 "CPar.fsy"
                 : 'StmtU));
# 884 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "CPar.fsy"
                                                               Access _1           
                   )
# 125 "CPar.fsy"
                 : 'Expr));
# 895 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "CPar.fsy"
                                                               _1                  
                   )
# 126 "CPar.fsy"
                 : 'Expr));
# 906 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "CPar.fsy"
                                                               _1                  
                   )
# 130 "CPar.fsy"
                 : 'ExprNotAccess));
# 917 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 131 "CPar.fsy"
                 : 'ExprNotAccess));
# 929 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 132 "CPar.fsy"
                 : 'ExprNotAccess));
# 941 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 133 "CPar.fsy"
                 : 'ExprNotAccess));
# 952 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "CPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 134 "CPar.fsy"
                 : 'ExprNotAccess));
# 963 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "CPar.fsy"
                                                               Prim1("printc", nl) 
                   )
# 135 "CPar.fsy"
                 : 'ExprNotAccess));
# 973 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 136 "CPar.fsy"
                 : 'ExprNotAccess));
# 985 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 137 "CPar.fsy"
                 : 'ExprNotAccess));
# 997 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 138 "CPar.fsy"
                 : 'ExprNotAccess));
# 1009 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 139 "CPar.fsy"
                 : 'ExprNotAccess));
# 1021 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 140 "CPar.fsy"
                 : 'ExprNotAccess));
# 1033 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 141 "CPar.fsy"
                 : 'ExprNotAccess));
# 1045 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 142 "CPar.fsy"
                 : 'ExprNotAccess));
# 1057 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 143 "CPar.fsy"
                 : 'ExprNotAccess));
# 1069 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 144 "CPar.fsy"
                 : 'ExprNotAccess));
# 1081 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 145 "CPar.fsy"
                 : 'ExprNotAccess));
# 1093 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 146 "CPar.fsy"
                 : 'ExprNotAccess));
# 1105 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 147 "CPar.fsy"
                 : 'ExprNotAccess));
# 1117 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 148 "CPar.fsy"
                 : 'ExprNotAccess));
# 1129 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "CPar.fsy"
                                                               PreInc _2
                   )
# 149 "CPar.fsy"
                 : 'ExprNotAccess));
# 1140 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "CPar.fsy"
                                                               PreDec _2
                   )
# 150 "CPar.fsy"
                 : 'ExprNotAccess));
# 1151 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "CPar.fsy"
                                                                       Condition(_2, _4, _6)
                   )
# 151 "CPar.fsy"
                 : 'ExprNotAccess));
# 1164 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "CPar.fsy"
                                                               CstI _1             
                   )
# 155 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1175 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "CPar.fsy"
                                                               _2                  
                   )
# 156 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1186 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "CPar.fsy"
                                                               Addr _2             
                   )
# 157 "CPar.fsy"
                 : 'AtExprNotAccess));
# 1197 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "CPar.fsy"
                                                               AccVar _1           
                   )
# 161 "CPar.fsy"
                 : 'Access));
# 1208 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "CPar.fsy"
                                                               _2                  
                   )
# 162 "CPar.fsy"
                 : 'Access));
# 1219 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 163 "CPar.fsy"
                 : 'Access));
# 1230 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "CPar.fsy"
                                                               AccDeref _2         
                   )
# 164 "CPar.fsy"
                 : 'Access));
# 1241 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 165 "CPar.fsy"
                 : 'Access));
# 1253 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "CPar.fsy"
                                                               []       
                   )
# 169 "CPar.fsy"
                 : 'Exprs));
# 1263 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "CPar.fsy"
                                                               _1       
                   )
# 170 "CPar.fsy"
                 : 'Exprs));
# 1274 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "CPar.fsy"
                                                               [_1]     
                   )
# 174 "CPar.fsy"
                 : 'Exprs1));
# 1285 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "CPar.fsy"
                                                               _1 :: _3 
                   )
# 175 "CPar.fsy"
                 : 'Exprs1));
# 1297 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "CPar.fsy"
                                                               _1       
                   )
# 179 "CPar.fsy"
                 : 'Const));
# 1308 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "CPar.fsy"
                                                               _1       
                   )
# 180 "CPar.fsy"
                 : 'Const));
# 1319 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "CPar.fsy"
                                                               - _2     
                   )
# 181 "CPar.fsy"
                 : 'Const));
# 1330 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "CPar.fsy"
                                                               -1       
                   )
# 182 "CPar.fsy"
                 : 'Const));
# 1340 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "CPar.fsy"
                                                               TypI     
                   )
# 186 "CPar.fsy"
                 : 'Type));
# 1350 "CPar.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "CPar.fsy"
                                                               TypC     
                   )
# 187 "CPar.fsy"
                 : 'Type));
|]
# 1361 "CPar.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 50;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
