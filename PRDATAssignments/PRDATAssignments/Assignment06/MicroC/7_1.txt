Exercise 7.1:

   > fromFile "ex1.c";;
   val it : Absyn.program =
   Prog
      [Fundec
         (None, "main", [(TypI, "n")],
         Block
            [Stmt
               (While
                  (Prim2 (">", Access (AccVar "n"), CstI 0),
                  Block
                     [Stmt (Expr (Prim1 ("printi", Access (AccVar "n"))));
                     Stmt
                        (Expr
                           (Assign
                              (AccVar "n",
                              Prim2 ("-", Access (AccVar "n"), CstI 1))))]));
            Stmt (Expr (Prim1 ("printc", CstI 10)))])]

   Declarations: Prog, Fundec, Stmt
   Satements: While, Block, Expr
   Types: TypI
   Expressions: CstI, AccVar, Assign, Access, Prim1, Prim2

   run (fromFile "ex1.c") [17];;
   > 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
   val it : Interp.store = map [(0, 0)]

   run (fromFile "ex5.c");;
   > val it : (int list -> Interp.store) = <fun:Invoke@3236>

   run (fromFile "ex11.c") [8];;
   > val it : Interp.store =
   map
    [(0, 8); (1, 0); (2, 9); (3, -999); (4, 0); (5, 0); (6, 0); (7, 0); (8, 0);
     ...]
